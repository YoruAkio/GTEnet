name: Prebuild and publish (dev)

on:
  workflow_dispatch:
  push:
    tags:
      - 'dev*'

permissions:
  contents: read

jobs:
  build:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            name: linux-x64
          - os: windows-latest
            name: win32-x64
          - os: macos-14
            name: darwin-arm64
          - os: macos-13
            name: darwin-x64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org/'
          always-auth: true

      - name: Setup Python (for node-gyp)
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install deps
        run: npm ci

      - name: Build prebuilds (N-API)
        run: npm run prebuild

      - name: Upload prebuild artifact
        uses: actions/upload-artifact@v4
        with:
          name: prebuilds-${{ matrix.name }}
          path: prebuilds/

  publish:
    name: Publish to npm (dev tag)
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/dev')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org/'
          always-auth: true

      - name: Install deps
        run: npm ci

      - name: Check and handle existing version
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Check if version exists on npm
          if npm view gtenet@$CURRENT_VERSION version >/dev/null 2>&1; then
            echo "Version $CURRENT_VERSION already exists on npm"
            echo "Attempting to unpublish existing version..."
            
            # Try to unpublish the existing version
            if npm unpublish gtenet@$CURRENT_VERSION; then
              echo "Successfully unpublished $CURRENT_VERSION"
            else
              echo "Failed to unpublish, trying to deprecate instead..."
              npm deprecate gtenet@$CURRENT_VERSION "Replaced by newer build" || echo "Deprecation also failed, continuing anyway..."
            fi
          else
            echo "Version $CURRENT_VERSION does not exist on npm"
          fi

          echo "VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Create prebuilds directory
        run: mkdir -p prebuilds

      - name: Download all prebuild artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: prebuilds-*
          path: ./artifacts

      - name: Merge prebuilds
        run: |
          echo "Merging prebuilds from all platforms..."
          # Ensure prebuilds directory exists
          mkdir -p prebuilds

          # Copy each platform's prebuilds maintaining the correct structure
          for artifact_dir in ./artifacts/prebuilds-*; do
            if [ -d "$artifact_dir" ]; then
              echo "Copying from: $artifact_dir"
              # Copy all files recursively, preserving directory structure
              cp -r "$artifact_dir"/* prebuilds/ 2>/dev/null || true
            fi
          done

          # Verify the structure matches what node-gyp-build expects
          echo "Checking prebuild structure..."
          find prebuilds -name "*.node" | head -5

      - name: List bundled prebuilds
        run: |
          echo "Final prebuilds structure:"
          find prebuilds -type f | sort
          echo "Directory structure:"
          ls -la prebuilds/*/

      - name: Configure npm auth
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc

      - name: Publish with dev tag
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing version: $VERSION"
          npm publish --tag dev
