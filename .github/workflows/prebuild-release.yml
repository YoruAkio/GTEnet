name: Prebuild and publish (release)

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

permissions:
  contents: read

jobs:
  build:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            name: linux-x64
          - os: windows-latest
            name: win32-x64
          - os: macos-14
            name: darwin-arm64
          - os: macos-13
            name: darwin-x64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org/'
          always-auth: true

      - name: Setup Python (for node-gyp)
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install deps
        run: npm ci

      - name: Build prebuilds (N-API)
        run: npm run prebuild

      - name: Debug prebuild output
        shell: bash
        run: |
          echo "Current working directory:"
          pwd
          echo "All files in project root:"
          ls -la
          echo "Looking for prebuilds directory:"
          find . -name "prebuilds" -type d
          echo "Looking for .node files anywhere:"
          find . -name "*.node" -type f
          echo "Checking if build/ directory exists:"
          ls -la build/ 2>/dev/null || echo "No build directory"

      - name: List prebuilds
        shell: bash
        run: |
          echo "Generated prebuilds:"
          find prebuilds -name "*.node" 2>/dev/null || echo "No .node files found"
          echo "All files in prebuilds:"
          find prebuilds -type f 2>/dev/null || echo "No files found"
          echo "Directory structure:"
          find prebuilds -type d 2>/dev/null || echo "No prebuilds directory found"
          if [ -d "prebuilds" ]; then
            echo "Contents of prebuilds:"
            ls -la prebuilds/ 2>/dev/null || echo "Cannot list prebuilds directory"
            for subdir in prebuilds/*/; do
              if [ -d "$subdir" ]; then
                echo "Contents of $subdir:"
                ls -la "$subdir" 2>/dev/null || echo "Cannot list $subdir"
              fi
            done
          fi

      - name: Upload prebuild artifact
        uses: actions/upload-artifact@v4
        with:
          name: prebuilds-${{ matrix.name }}
          path: prebuilds/
        if: always() && hashFiles('prebuilds/**/*.node') != ''

  publish:
    name: Publish to npm (latest)
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org/'
          always-auth: true

      - name: Install deps
        run: npm ci

      - name: Get version info
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          echo "VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Create prebuilds directory
        run: mkdir -p prebuilds

      - name: Download all prebuild artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: prebuilds-*
          path: ./artifacts

      - name: Merge prebuilds
        shell: bash
        run: |
          echo "Merging prebuilds from all platforms..."
          # Ensure prebuilds directory exists
          mkdir -p prebuilds

          # Copy each platform's prebuilds maintaining the correct structure
          for artifact_dir in ./artifacts/prebuilds-*; do
            if [ -d "$artifact_dir" ]; then
              echo "Copying from: $artifact_dir"
              # Copy all files recursively, preserving directory structure
              cp -r "$artifact_dir"/* prebuilds/ 2>/dev/null || true
            fi
          done

          # Verify the structure matches what node-gyp-build expects
          echo "Checking prebuild structure..."
          find prebuilds -name "*.node" | head -5

      - name: List bundled prebuilds
        shell: bash
        run: |
          echo "Final prebuilds structure:"
          find prebuilds -type f | sort
          echo "Directory structure:"
          if [ -d "prebuilds" ]; then
            for dir in prebuilds/*/; do
              if [ -d "$dir" ]; then
                echo "Contents of $dir:"
                ls -la "$dir"
              fi
            done
          fi

      - name: Configure npm auth
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc

      - name: Publish to npm (latest tag)
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing version: $VERSION to latest tag"
          npm publish --tag latest
